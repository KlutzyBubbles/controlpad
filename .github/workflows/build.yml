name: Build & Release

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    outputs:
      run_lint: ${{ join(steps.run_lint.outputs.*, '\n' }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"
      # - uses: actions/cache@v1
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-
      - name: Install
        run: npm install
      - name: lint
        run: npm run lint
        id: run_lint
  build:
    needs: lint
    if: ${{ always() }}
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"
      # - uses: actions/cache@v1
      #   if: matrix.os != 'macOS-latest'
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-
      # - name: Set MacOS signing certs
      #   if: matrix.os == 'macOS-latest'
      #   run: chmod +x tools/add-macos-cert.sh && ./tools/add-macos-cert.sh
      #   env:
      #     MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
      #     MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
      # - name: Set Windows signing certificate
      #   if: matrix.os == 'windows-latest'
      #   continue-on-error: true
      #   id: write_file
      #   uses: timheuer/base64-to-file@v1
      #   with:
      #     fileName: 'win-certificate.pfx'
      #     encodedString: ${{ secrets.WINDOWS_CODESIGN_P12 }}
      - name: Install
        run: npm install
      - name: Make
        if: startsWith(github.ref, 'refs/tags/')
        run: npm run make --arch=all
        # env:
        #   APPLE_ID: ${{ secrets.APPLE_ID }}
        #   APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        #   WINDOWS_CODESIGN_FILE: ${{ steps.write_file.outputs.filePath }}
        #   WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD }}
      - name: Get commits since version
        id: commits
        run: echo ::set-output name=value::$(git log "$(git describe --tags --abbrev=0)..HEAD" --no-merges --oneline)
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          body: |
            ${{ needs.lint.outputs.run_lint }}
            ${{ steps.commits.outputs.value }}
          files: |
            out/**/*.deb
            out/**/*.dmg
            out/**/*setup*.exe
            out/**/*.rpm
            out/**/*.zip
